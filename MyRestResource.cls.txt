@RestResource(urlMapping='/Account/*')
global with sharing class MyRestResource {

    @HttpDelete
    global static void doDelete() {
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        Account account = [SELECT Id FROM Account WHERE Id = :accountId];
        if(account != null){
            delete account;
        }
        
    }
  
    @HttpGet
    global static Account doGet() {
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        Account result = [SELECT Id, Name, Phone, Website FROM Account WHERE Id = :accountId];
        return result;
    }
  
  @HttpPost
    global static String doPost(String name,
        String phone, String website) {
        Account account = new Account();
        account.Name = name;
        account.phone = phone;
        account.website = website;
        insert account;
        return account.Id;
    }
    @HttpPatch 
    global static String doPatch(String name,
        String phone, String website) {
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        Account result = [SELECT Id, Name, Phone, Website FROM Account WHERE Id = :accountId];
            
        if(result != null){
          if(name!=null){
        	result.Name = name;
           }
           if(phone!=null){
        	   result.Phone = phone;      
           }
           if(website!=null){
               result.Website = website;    
            }
            update result;    
        	return result.Id;
        }    
        return ' ';
    }
    @HttpPut
    global static String doPut(String name,
        String phone, String website) {
        RestRequest req = RestContext.request;
        String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        Account account = new Account();
         if(String.isNotEmpty(accountId)) {
            account.Id = accountId;
        }   
        account.Name = name;
        account.phone = phone;
        account.website = website;
        upsert account;
        return account.Id;
        
    }
    
    
    
      
}